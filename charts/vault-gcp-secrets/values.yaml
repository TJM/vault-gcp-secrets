# Values for vault-gcp-secrets

replicaCount: 1
deploymentStrategy: {}

image:
  repository: quay.io/tommydavita/vault-gcp-secrets
  tag: v1.9.4
  pullPolicy: IfNotPresent
  volumeMounts: []
    # - name: ca
    #   mountPath: "/etc/vault-gcp-secrets"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

environmentVars: []


# Set the address for vault (by default we assume you are running a dev
# instance of vault in the same namespace as the operator) and specify the
# authentication method for the operator.  Possible values are:
# 'kubernetes', or 'approle'.

# If the authentication method is 'kubernetes':
# * You must provide the 'kubernetesRole' which should be used for the authentication.
# The default authentication path for the Kubernets Auth method is 'auth/kubernetes',
# if you enabled it under another path you must change the 'authMountPath' value.
#
# If the auth method is 'approle':
# * You must provide `credentialSecretName` pointing to a secret with the keys
# `role_id` and `secret_id` set.
# The default authentication path for 'approle' auth is 'auth/approle',
# if you enabled it under another path you must change the 'authMountPath' value.
#
vault:
  ## Vault Address, eg: http://localhost:8200
  address: "http://vault:8200"

  ## number of retries before exiting in error (this helps prevent running out of leases)
  numRetries: 3

  ## Vault authMethod (currently supported values are `appRole` or `kubernetes`)
  authMethod: kubernetes
  # If null, VAULT defaults to `auth/authMethod`
  authMountPath: ~

  credentialSecretName: ~
  kubernetesRole: vault-gcp-secrets
  gcpSecretPath: gcp/my-role

## K8s Destination Secret
secret:
  # Resulting name of the kubernetes secret
  name: gcp-secret

  # Key is the name of the secret key under data (for Opaque)
  key: key.json

  # Secret Type
  type: kubernetes.io/dockerconfigjson

  ## what values to pull from the vault secret (inside with secret <gcpSecretPath>)
  template: base64Decode .Data.private_key_data

  ## Set a custom template command. The template output will be written to /dev/shm/key.json
  # customTemplateCommand: |
  #   kubectl create secret {{ .Values.secret.type }} "{{ .Values.secret.name }}" --from-file={{ .Values.secret.key }}=/dev/shm/key.json --dry-run=client -o yaml | kubectl apply -f -
  #   kubectl describe secret {{ .Values.secret.name }}

  ## For docker-registry secret.type, these parameters will be used
  dockerServer: gcr.io
  dockerUsername: _json_key
  dockerEmail: not.used@example.com

rbac:
  create: true
  createrole: true

serviceAccount:
  create: true
  name: vault-gcp-secrets

# Annotations for vault-gcp-secrets pod(s).
podAnnotations: {}

# Additional labels for the vault-gcp-secrets pod(s).
podLabels: {}

podSecurityContext: {}

securityContext: {}

# Annotations for the vault-gcp-secrets-test-connection pod
testPodAnnotations: {}

# Additional labels for the vault-gcp-secrets-test-connection pod
testPodLabels: {}

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

volumes: []
  # - name: ca
  #   secret:
  #     secretName: vault-gcp-secrets-ca
  #     items:
  #       - key: ca.pem
  #         path: ca.pem

nodeSelector: {}

tolerations: []

affinity: {}
