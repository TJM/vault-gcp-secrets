apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "vault-gcp-secrets.fullname" . }}-config
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "vault-gcp-secrets.labels" . | indent 4 }}
  {{- if .Values.podAnnotations }}
  annotations:
{{ include "vault-gcp-secrets.annotations" . | indent 4 }}
  {{- end }}
data:
  agent.hcl: |
    exit_after_auth = false
    pid_file = "/dev/shm/vault-agent.pid"

    vault {
        address = "{{ .Values.vault.address }}"
        num_retries = "{{ .Values.vault.numRetries }}"
    }

    auto_auth {
      method "{{ .Values.vault.authMethod }}" {
          {{- if .Values.vault.authMountPath }}
          mount_path = "{{ .Values.vault.authMountPath }}"
          {{- end }}
          {{- if .Values.vault.namespace }}
          namespace = "{{ .Values.vault.namespace }}"
          {{- end }}

          config = {
          {{- if eq .Values.vault.authMethod "approle" }}
              role_id_file_path = "/run/secrets/vault-credentials/role_id"
              secret_id_file_path = "/run/secrets/vault-credentials/secret_id"
              remove_secret_id_file_after_reading = false
          {{- end }}
          {{- if eq .Values.vault.authMethod "kubernetes" }}
              role = "{{ .Values.vault.kubernetesRole }}"
          {{- end }}
          }
      }

      sink "file" {
          config = {
              path = "/dev/shm/.agent-token"
          }
      }
    }

    template {
      error_on_missing_key = true
      source      = "/srv/vault-agent/template.ctmpl"
      destination = "/dev/shm/key.json"
      exec        = {
        command = [
          "bash",
          "/srv/vault-agent/template-command.sh",
        ]
      }
    }

    template_config {
      exit_on_retry_failure = true
    }

  template.ctmpl: |
    {{ "{{" }} with secret "{{ .Values.vault.gcpSecretPath }}" {{ "}}" }}
    {{ "{{" }} {{ .Values.secret.template }} {{ "}}" }}
    {{ "{{" }} end {{ "}}" }}

  template-command.sh: |
    #!/bin/bash
    {{- if .Values.debugVerboseTemplateCommand }}
    set -x
    {{- end }}
    {{- if .Values.secret.customTemplateCommand }}
      {{- tpl .Values.secret.customTemplateCommand . | nindent 4 }}
    {{- else if eq .Values.secret.type "kubernetes.io/dockerconfigjson" }}
    kubectl create secret docker-registry "{{ .Values.secret.name }}" \
      --docker-server "{{ .Values.secret.dockerServer }}" \
      --docker-username "{{ .Values.secret.dockerUsername }}" \
      --docker-email "{{ .Values.secret.dockerEmail }}" \
      --docker-password "$(cat /dev/shm/key.json)" \
      --dry-run=client -o yaml | kubectl replace -f -
    {{- else }}
    kubectl create secret generic "{{ .Values.secret.name }}" \
      --from-file={{ .Values.secret.key }}=/dev/shm/key.json \
      --dry-run=client -o yaml | kubectl replace -f -
    {{- end }}
    {{- if .Values.debugBypassTemplateCommandFail }}
    echo "The exit code would have been: $?"
    exit 0 # feign success
    {{- end }}
